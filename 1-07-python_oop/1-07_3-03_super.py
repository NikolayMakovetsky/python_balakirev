# Функция super() и делегирование

# Обсудим расширение классов и переопределение их методов
# Разберемся с работой функции super()
# Научимся делегировать методы, вызывая их
# из базового класса через функцию super()

print("\n---Автоматически вызван инициализатор базового класса")
class Geom:
    name = 'Geom'

    def __init__(self):
        print("инициализатор Geom")

    def draw(self):
        print("Рисование примитива")
 
 
class Line(Geom):
    def draw(self):
        print("Рисование линии")

    def __call__(self):
        print("__call__")

l = Line()
l.draw()
print(l())

# Сначала вызывается __call__(), который, в свою очередь, ОТКУДА ВЫЗЫВАЕТСЯ????
# последовательно вызывает метод __new__() для создания экземпляра класса,
# а затем, метод __init__() для его инициализации.
# Так вот, все эти методы вызываются из дочернего класса Line.


print("\n---Доработаем наши классы")


class Geom:
    name = 'Geom'

    def __init__(self, x1, y1, x2, y2):
        print(f"инициализатор Geom для {self.__class__}")
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2

    def draw(self):
        print("Рисование примитива")


class Line(Geom):

    def draw(self):
        print("Рисование линии")


class Rect(Geom):
    def __init__(self, x1, y1, x2, y2, fill=None):
        # во избежание некорректной работы
        # вызов инициализатора базового класса делаем в первой же строчке!
        super().__init__(x1, y1, x2, y2) # берем __init__ из предка
        print("инициализатор Rect")
        self.fill = fill
 
    def draw(self):
        print("Рисование прямоугольника")


l = Line(0, 0, 10, 20)
r = Rect(1, 2, 3, 4)

