import timeit

# Коллекция __slots__

# Познакомимся со специальной коллекцией __slots__,
# которую можно прописывать в любом классе языка Python

# Вот такие три особенности дает коллекция __slots__ экземплярам класса:
#   - ограничение создаваемых локальных свойств
#   - уменьшение занимаемой памяти
#   - ускорение работы с локальными свойствами

print("\n---класс без коллекции __slots__ ")
# Пока в этом классе нет коллекции __slots__,
# поэтому при создании его экземпляра можно
# свободно оперировать существующими свойствами


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


pt = Point(1, 2)
pt.x
pt.y = 100
pt.z = 4
print(pt.__dict__)


print("\n---класс с коллекцией __slots__ ")
# В кортеже мы перечисляем атрибуты с именами x и y (указываются в виде строки)
# и только такие локальные свойства могут существовать
# в экземплярах этого класса


class Point2D:
    __slots__ = ('x', 'y')
 
    def __init__(self, x, y):
        self.x = x
        self.y = y


pt2 = Point2D(10, 20)
pt2.x
pt2.y
# pt2.z = 30 # Но вот добавить новое уже не получится
pt2.__slots__
# pt2.__dict__ # Привычная нам коллекция отсутствует если есть __slots__

pt2.x = 50
del pt2.y
pt2.y = 100

# Мы совершенно спокойно можем изменять,
# удалять и добавлять локальные свойства x, y:
# Но только их и никакие другие


print("\n---Добавление атрибутов в класс с коллекцией __slots__ ")



class Point2D:
    __slots__ = ('x', 'y')
    MAX_COORD = 100 # в сам класс атрибуты добавлять можно!
 
    def __init__(self, x, y):
        self.x = x
        self.y = y



print("\n---__slots__ уменьшает объем памяти, занимаемый экземпляром класса")

pt = Point(1, 2)
pt2 = Point2D(10, 20)

print(pt.__sizeof__(), pt.__dict__.__sizeof__())    # 32+88=120
print(pt2.__sizeof__())                             # 32+0=32

print("\n--- __slots__ ускоряет работу с локальными свойствами экземпляров класса")

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def calc(self):
        self.x += 1
        del self.y 
        self.y = 0

class Point2D:
    __slots__ = ('x', 'y')
    MAX_COORD = 100 # в сам класс атрибуты добавлять можно!
 
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def calc(self):
        self.x += 1
        del self.y 
        self.y = 0

pt = Point(1, 2)
pt2 = Point2D(10, 20)


t1 = timeit.timeit(pt.calc)     # 0.34  0.35
t2 = timeit.timeit(pt2.calc)    # 0.24  0.22

print(t1, t2)
