print("\n---Распространение исключений")
# Рассмотрим пример того, как исключение,
# зародившееся на одном из уровней стека вызова,
# постепенно поднимается на самый верх.
# Это называется распространением исключений. По-английски: propagation exceptions
# Причем, обработать (перехватывать) исключение можно на любом уровне этого стека.

def func2():
    return 1/0


def func1():
    return func2()


print("Я к вам пишу – чего же боле?")
print("Что я могу еще сказать?")
print("Теперь, я знаю, в вашей воле")
func1()
print("Меня презреньем наказать.")
print("Но вы, к моей несчастной доле")
print("Хоть каплю жалости храня,")
print("Вы не оставите меня.")

# ВСПОМНИМ ЧТО ПРИ ВЫПОЛНЕНИИ ПРОГРАММЫ ФОРМИРУЕТСЯ СТЕК ВЫЗОВА ФУНКЦИЙ
# Traceback (most recent call last):
# line 19, in <module>:   func1()
# line 13, in func1:      return func2()
# line 9, in func2:       return 1/0        # в самом низу указывается источник ошибки

# Мы можем обрабатывать исключения на разных уровнях стека вызова, что очень удобно!
# В критических функциях достаточно генерировать исключения,
# а их обработку выполнять на другом, более глобальном уровне.

# Например, создается класс для печати данных на принтере.
# Тогда все ошибки, связанные с принтером
# (нет бумаги, нет подключения, не тот режим печати и т.п.)
# можно обрабатывать единым образом на верхнем, глобальном уровне.
# А нижние уровни только сигнализируют о проблемах и не более того.